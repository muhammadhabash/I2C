
I2C communication(master).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e7  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000699  00000000  00000000  00000d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000682  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000386  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "MCAL/I2C/I2C_interface.h"

int main(void)
{
	I2C_masterInit();  
  7c:	0e 94 4b 00 	call	0x96	; 0x96 <I2C_masterInit>
	while(1){
		
		I2C_masterStart();
  80:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_masterStart>
		I2C_masterWriteToAddress(0x20); 
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_masterWriteToAddress>
		I2C_masterWriteData(0xf0); //41    
  8a:	80 ef       	ldi	r24, 0xF0	; 240
  8c:	0e 94 65 00 	call	0xca	; 0xca <I2C_masterWriteData>
		I2C_masterStop(); 
  90:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_masterStop>
  94:	f5 cf       	rjmp	.-22     	; 0x80 <main+0x4>

00000096 <I2C_masterInit>:
	                                                       /*******************************************************************************/
	TWCR = (1 << TWINT) | (1 << TWEN);                     /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
	while (!(TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
	while ( (TWSR & 0xF8) != MASTER_READ_DATA_TRANSMITTED);/* 3 - Check that data has been transmitted to master                          */
	return TWDR;                                           /* 4 - Return transmitted data                                                 */
}                                                          /*******************************************************************************/
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 b9       	out	0x00, r24	; 0
  9a:	11 b8       	out	0x01, r1	; 1
  9c:	08 95       	ret

0000009e <I2C_masterStart>:
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_masterStart+0x4>
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	e1 f7       	brne	.-8      	; 0xa8 <I2C_masterStart+0xa>
  b0:	08 95       	ret

000000b2 <I2C_masterWriteToAddress>:
  b2:	88 0f       	add	r24, r24
  b4:	83 b9       	out	0x03, r24	; 3
  b6:	84 e8       	ldi	r24, 0x84	; 132
  b8:	86 bf       	out	0x36, r24	; 54
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <I2C_masterWriteToAddress+0x8>
  c0:	81 b1       	in	r24, 0x01	; 1
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	88 31       	cpi	r24, 0x18	; 24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <I2C_masterWriteToAddress+0xe>
  c8:	08 95       	ret

000000ca <I2C_masterWriteData>:
  ca:	83 b9       	out	0x03, r24	; 3
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	86 bf       	out	0x36, r24	; 54
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <I2C_masterWriteData+0x6>
  d6:	81 b1       	in	r24, 0x01	; 1
  d8:	88 7f       	andi	r24, 0xF8	; 248
  da:	88 32       	cpi	r24, 0x28	; 40
  dc:	e1 f7       	brne	.-8      	; 0xd6 <I2C_masterWriteData+0xc>
  de:	08 95       	ret

000000e0 <I2C_masterStop>:
                                                                                                                                          //
void I2C_masterStop(void){                                                                                                                //
	                                                  /************************************************************************************/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); /* 1 - Reset I2C interrupt flag, enable I2C operation and transmit a stop condition */
  e0:	84 e9       	ldi	r24, 0x94	; 148
  e2:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR & (1<<TWSTO)));                    /* 2 - Stay here until stop condition is successfully transmitted                   */
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	04 fe       	sbrs	r0, 4
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <I2C_masterStop+0x4>
}                                                     /************************************************************************************/
  ea:	08 95       	ret

000000ec <__vector_11>:

volatile uint32_t counts = 0;

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
	counts++;
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 10a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	a1 1d       	adc	r26, r1
 112:	b1 1d       	adc	r27, r1
 114:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 120:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
